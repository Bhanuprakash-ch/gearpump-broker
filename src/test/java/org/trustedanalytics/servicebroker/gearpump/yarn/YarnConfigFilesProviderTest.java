/**
 * Copyright (c) 2015 Intel Corporation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.trustedanalytics.servicebroker.gearpump.yarn;

import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.MockitoAnnotations;
import org.mockito.runners.MockitoJUnitRunner;
import org.trustedanalytics.servicebroker.gearpump.service.file.ArchiverService;

import java.io.IOException;
import java.io.InputStream;

import static org.junit.Assert.assertThat;
import static org.mockito.Mockito.doThrow;
import static org.mockito.Mockito.when;

@RunWith(MockitoJUnitRunner.class)
public class YarnConfigFilesProviderTest {

    private static final String correctBase64FilesContent = "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";
    private static final String inCorrectBase64FilesContent = "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";

    @Mock
    private YarnVcapServiceReader yarnVcapServiceReader;

    @Mock
    private ArchiverService archiverService;

    @InjectMocks
    private YarnConfigFilesProvider yarnConfigFilesProvider;

    @Before
    public void init() {
        yarnConfigFilesProvider = new YarnConfigFilesProvider();
        MockitoAnnotations.initMocks(this);
        mockYarnVcapServiceReader();
        mockArchiverService();
    }

    @Test
    public void testPrepareConfigFilesSuccess() throws IOException {
        yarnConfigFilesProvider.prepareConfigFiles();
    }

    @Test(expected = IOException.class)
    public void testPrepareConfigFilesThrowsExceptionWithWrongBase64FileContent() throws IOException {
        when(yarnVcapServiceReader.getConfigZipFiles()).thenReturn(inCorrectBase64FilesContent);
        yarnConfigFilesProvider.prepareConfigFiles();
    }

    @Test(expected = IOException.class)
    public void testPrepareConfigFilesThrowsExceptionWhenUnzipFailed() throws IOException {
        doThrow(IOException.class).when(archiverService).unzip(Mockito.<InputStream>any(), Mockito.anyBoolean());
        yarnConfigFilesProvider.prepareConfigFiles();
    }

    private void mockYarnVcapServiceReader() {
        when(yarnVcapServiceReader.getConfigZipFiles()).thenReturn(correctBase64FilesContent);
    }

    private void mockArchiverService() {
        when(archiverService.intoDestination(Mockito.anyString())).thenReturn(archiverService);
    }

}
